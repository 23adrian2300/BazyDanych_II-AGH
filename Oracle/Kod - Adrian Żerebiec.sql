--Zadanie 1 i 2
CREATE TABLE PERSON
(
    PERSON_ID INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    FIRSTNAME VARCHAR(50),
    LASTNAME  VARCHAR(50),
    CONSTRAINT PERSON_PK PRIMARY KEY (PERSON_ID) ENABLE
);

CREATE TABLE TRIP
(
    TRIP_ID       INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    TRIP_NAME     VARCHAR(100),
    COUNTRY_ID    INT,
    TRIP_DATE     DATE,
    MAX_NO_PLACES INT,
    CONSTRAINT TRIP_PK PRIMARY KEY (TRIP_ID) ENABLE
);

ALTER TABLE TRIP
    ADD CONSTRAINT TRIP_FK1 FOREIGN KEY
        (COUNTRY_ID) REFERENCES COUNTRY (COUNTRY_ID) ENABLE;
CREATE TABLE COUNTRY
(
    COUNTRY_ID   INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    COUNTRY_NAME VARCHAR(50),
    CONSTRAINT COUNTRY_PK PRIMARY KEY (COUNTRY_ID) ENABLE
);

ALTER TABLE TRIP
    ADD CONSTRAINT TRIP_FK1 FOREIGN KEY
        (COUNTRY_ID) REFERENCES COUNTRY (COUNTRY_ID) ENABLE;


CREATE TABLE RESERVATION
(
    RESERVATION_ID INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    TRIP_ID        INT,
    PERSON_ID      INT,
    STATUS         CHAR(1),
    CONSTRAINT RESERVATION_PK PRIMARY KEY (RESERVATION_ID) ENABLE
);


ALTER TABLE RESERVATION
    ADD CONSTRAINT RESERVATION_FK1 FOREIGN KEY
        (PERSON_ID) REFERENCES PERSON (PERSON_ID) ENABLE;

ALTER TABLE RESERVATION
    ADD CONSTRAINT RESERVATION_FK2 FOREIGN KEY
        (TRIP_ID) REFERENCES TRIP (TRIP_ID) ENABLE;

ALTER TABLE RESERVATION
    ADD CONSTRAINT RESERVATION_CHK1 CHECK
        (STATUS IN ('N', 'P', 'C')) ENABLE;


CREATE TABLE LOG
(
    LOG_ID         INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    RESERVATION_ID INT                              NOT NULL,
    LOG_DATE       DATE                             NOT NULL,
    STATUS         CHAR(1),
    CONSTRAINT LOG_PK PRIMARY KEY (LOG_ID) ENABLE
);

ALTER TABLE LOG
    ADD CONSTRAINT LOG_CHK1 CHECK
        (STATUS IN ('N', 'P', 'C')) ENABLE;

ALTER TABLE LOG
    ADD CONSTRAINT LOG_FK1 FOREIGN KEY
        (RESERVATION_ID) REFERENCES RESERVATION (RESERVATION_ID) ENABLE;


--COUNTRY
INSERT INTO COUNTRY(COUNTRY_NAME)
VALUES ('FRANCJA');

INSERT INTO COUNTRY(COUNTRY_NAME)
VALUES ('POLSKA');

INSERT INTO COUNTRY(COUNTRY_NAME)
VALUES ('HISZPANIA');

INSERT INTO COUNTRY(COUNTRY_NAME)
VALUES ('WŁOCHY');


-- TRIPS
INSERT INTO TRIP(TRIP_NAME, COUNTRY_ID, TRIP_DATE, MAX_NO_PLACES)
VALUES ('WYCIECZKA DO PARYZA', 1, TO_DATE('2023-09-12', 'YYYY-MM-DD'), 30);

INSERT INTO TRIP(TRIP_NAME, COUNTRY_ID, TRIP_DATE, MAX_NO_PLACES)
VALUES ('PIĘKNY KRAKÓW', 2, TO_DATE('2023-07-03', 'YYYY-MM-DD'), 25);

INSERT INTO TRIP(TRIP_NAME, COUNTRY_ID, TRIP_DATE, MAX_NO_PLACES)
VALUES ('ZNÓW DO FRANCJI', 1, TO_DATE('2023-05-01', 'YYYY-MM-DD'), 21);

INSERT INTO TRIP(TRIP_NAME, COUNTRY_ID, TRIP_DATE, MAX_NO_PLACES)
VALUES ('HEL', 2, TO_DATE('2023-03-01', 'YYYY-MM-DD'), 15);

INSERT INTO TRIP(TRIP_NAME, COUNTRY_ID, TRIP_DATE, MAX_NO_PLACES)
VALUES ('KOLOSEUM', 4, TO_DATE('2023-06-25', 'YYYY-MM-DD'), 85);

-- PERSON
INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('JAN', 'NOWAK');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('JAN', 'KOWALSKI');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('JAN', 'NOWAKOWSKI');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('ADAM', 'KOWALSKI');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('NOVAK', 'NOWAK');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('PIOTR', 'PIOTROWSKI');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('MAREK', 'ADAMOWSKI');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('SZYMON', 'RYT');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('KAROL', 'KOWALSKI');

INSERT INTO PERSON(FIRSTNAME, LASTNAME)
VALUES ('ARTUR', 'KAROLAK');


-- RESERVATION
INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (1, 1, 'P');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (1, 2, 'N');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (2, 10, 'C');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (3, 7, 'P');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (1, 6, 'N');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (4, 8, 'C');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (3, 9, 'N');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (2, 4, 'C');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (4, 4, 'P');

INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS)
VALUES (3, 9, 'P');

-- LOGI
INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (1, '2023-02-01', 'P');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (2, '2023-01-03', 'N');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (3, '2023-01-01', 'P');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (4, '2022-12-01', 'C');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (5, '2023-02-07', 'P');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (6, '2023-01-12', 'C');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (7, '2023-03-17', 'P');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (8, '2023-02-07', 'N');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (9, '2023-03-10', 'C');

INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
VALUES (10, '2023-01-23', 'N');


--Zadanie 3
CREATE OR REPLACE VIEW RESERVATIONSVIEW
AS
SELECT C.COUNTRY_NAME,
       T.TRIP_DATE,
       T.TRIP_NAME,
       P.FIRSTNAME,
       P.LASTNAME,
       R.RESERVATION_ID,
       R.STATUS
FROM TRIP T
         INNER JOIN RESERVATION R
                    ON R.TRIP_ID = T.TRIP_ID
         INNER JOIN PERSON P
                    ON P.PERSON_ID = R.PERSON_ID
         INNER JOIN COUNTRY C
                    ON C.COUNTRY_ID = T.COUNTRY_ID;


CREATE OR REPLACE VIEW TRIPSVIEW
AS
SELECT COUNTRY_NAME,
       TRIP_DATE,
       TRIP_NAME,
       MAX_NO_PLACES,
       MAX_NO_PLACES - (SELECT COUNT(*)
                        FROM RESERVATION R
                        WHERE R.STATUS = 'P'
                          AND R.TRIP_ID = T.TRIP_ID)
           AS NO_AVAILABLE_PLACES
FROM TRIP T
         INNER JOIN COUNTRY C
                    ON T.COUNTRY_ID = C.COUNTRY_ID;


CREATE OR REPLACE VIEW AVAILABLETRIPSVIEW
AS
SELECT COUNTRY_NAME,
       TRIP_DATE,
       TRIP_NAME,
       MAX_NO_PLACES,
       NO_AVAILABLE_PLACES
FROM TRIPSVIEW
WHERE TRIP_DATE > SYSDATE
  AND NO_AVAILABLE_PLACES > 0;


--Zadanie 5

CREATE OR REPLACE TYPE TRIPPARTICIPANTSROW AS OBJECT
(
    COUNTRY_NAME   VARCHAR2(50),
    TRIP_DATE      DATE,
    TRIP_NAME      VARCHAR2(100),
    FIRSTNAME      VARCHAR2(50),
    LASTNAME       VARCHAR2(50),
    RESERVATION_ID INT,
    STATUS         CHAR(1)
);

CREATE OR REPLACE TYPE TRIPPARTICIPANTSTABLE AS TABLE OF TRIPPARTICIPANTSROW;

CREATE OR REPLACE FUNCTION TRIPPARTICIPANTS(
    SEARCHED_TRIP_ID INT
)
    RETURN TRIPPARTICIPANTSTABLE
    IS
    RETURNTABLE TRIPPARTICIPANTSTABLE;
BEGIN
    SELECT TRIPPARTICIPANTSROW(
                   RV.COUNTRY_NAME,
                   RV.TRIP_DATE,
                   RV.TRIP_NAME,
                   FIRSTNAME,
                   LASTNAME,
                   RESERVATION_ID,
                   STATUS) BULK COLLECT
    INTO RETURNTABLE
    FROM RESERVATIONSVIEW RV
             INNER JOIN TRIP T ON RV.TRIP_NAME = T.TRIP_NAME
    WHERE T.TRIP_ID = SEARCHED_TRIP_ID;
    RETURN RETURNTABLE;
END;


CREATE OR REPLACE FUNCTION PERSONRESERVATIONS(
    SEARCHED_PERSON_ID INT
)
    RETURN TRIPPARTICIPANTSTABLE
    IS
    RETURNTABLE TRIPPARTICIPANTSTABLE;
BEGIN
    SELECT TRIPPARTICIPANTSROW(RV.COUNTRY_NAME,
                               RV.TRIP_DATE,
                               TRIP_NAME,
                               RV.FIRSTNAME,
                               RV.LASTNAME,
                               RESERVATION_ID,
                               STATUS) BULK COLLECT
    INTO RETURNTABLE
    FROM RESERVATIONSVIEW RV
             INNER JOIN PERSON P ON P.FIRSTNAME = RV.FIRSTNAME AND P.LASTNAME = RV.LASTNAME
    WHERE P.PERSON_ID = SEARCHED_PERSON_ID;
    RETURN RETURNTABLE;
END;



CREATE OR REPLACE TYPE AVAILABLETRIPSROW AS OBJECT
(
    COUNTRY             VARCHAR2(50),
    TRIP_DATE           DATE,
    TRIP_NAME           VARCHAR2(100),
    NO_AVAILABLE_PLACES INT
);

CREATE OR REPLACE TYPE AVAILABLETRIPSTABLE AS TABLE OF AVAILABLETRIPSROW;

CREATE OR REPLACE FUNCTION AVAILABLETRIPS(
    SEARCHED_COUNTRY VARCHAR,
    SEARCHED_DATE_FROM DATE,
    SEARCHED_DATE_TO DATE
)
    RETURN AVAILABLETRIPSTABLE
    IS
    RETURNTABLE AVAILABLETRIPSTABLE;
BEGIN
    SELECT AVAILABLETRIPSROW(COUNTRY_NAME,
                             TRIP_DATE,
                             TRIP_NAME,
                             NO_AVAILABLE_PLACES) BULK COLLECT
    INTO RETURNTABLE
    FROM TRIPSVIEW TV
    WHERE TV.COUNTRY_NAME = SEARCHED_COUNTRY
      AND (TV.TRIP_DATE BETWEEN SEARCHED_DATE_FROM AND SEARCHED_DATE_TO);
    RETURN RETURNTABLE;
END;


--ZADANIE 5/6
CREATE OR REPLACE PROCEDURE ADDRESERVATION(
    TRIP_ID_ADD IN INT, PERSON_ID_ADD IN INT
) AS
    NEW_TRIP_DATE      DATE;
    NO_AVAILABLE       INT;
    NEW_RESERVATION_ID INT;
BEGIN
    SELECT TRIP_DATE
    INTO NEW_TRIP_DATE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    SELECT NO_AVAILABLE_PLACES
    INTO NO_AVAILABLE
    FROM TRIPSVIEW VT
             INNER JOIN TRIP T2 ON VT.TRIP_NAME = T2.TRIP_NAME
    WHERE T2.TRIP_ID = TRIP_ID_ADD;

    IF NEW_TRIP_DATE > TRUNC(SYSDATE) AND NO_AVAILABLE > 0 THEN
        INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS) VALUES (TRIP_ID_ADD, PERSON_ID_ADD, 'N');
        SELECT MAX(RESERVATION_ID)
        INTO NEW_RESERVATION_ID
        FROM RESERVATION;
        INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS) VALUES (NEW_RESERVATION_ID, TRUNC(SYSDATE), 'N');
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'OUT OF DATE');
    END IF;
END;

CREATE OR REPLACE PROCEDURE MODIFYRESERVATIONSTATUS(
    RESERVATION_ID_MOD IN INT, STATUS_CHANGE IN CHAR
) AS
    NO_AVAILABLE   INT;
    TRIP_ID_AC     INT;
    CURRENT_STATUS CHAR;
BEGIN
    SELECT TRIP_ID
    INTO TRIP_ID_AC
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    SELECT NO_AVAILABLE_PLACES
    INTO NO_AVAILABLE
    FROM TRIPSVIEW VT
             INNER JOIN TRIP T2 ON VT.TRIP_NAME = T2.TRIP_NAME
    WHERE T2.TRIP_ID = TRIP_ID_AC;
    SELECT STATUS
    INTO CURRENT_STATUS
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;
    IF (CURRENT_STATUS = 'N' AND STATUS_CHANGE = 'P' AND NO_AVAILABLE > 0) OR
       ((CURRENT_STATUS = 'N' OR CURRENT_STATUS = 'P' OR CURRENT_STATUS = 'C') AND STATUS_CHANGE = 'C') OR
       ((CURRENT_STATUS = 'C') AND STATUS_CHANGE = 'P' AND NO_AVAILABLE > 0) THEN
        UPDATE RESERVATION
        SET STATUS = STATUS_CHANGE
        WHERE RESERVATION_ID = RESERVATION_ID_MOD;
        INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS) VALUES (RESERVATION_ID_MOD, TRUNC(SYSDATE), STATUS_CHANGE);
    END IF;
END;


CREATE OR REPLACE PROCEDURE MODIFYNOPLACES(TRIP_ID_MOD IN INT, NEW_NUMBER_OF_PLACES IN INT) AS
    NO_RESERVED INT;
BEGIN
    SELECT T.MAX_NO_PLACES - TV.NO_AVAILABLE_PLACES
    INTO NO_RESERVED
    FROM TRIPSVIEW TV
             INNER JOIN TRIP T ON TV.TRIP_NAME = T.TRIP_NAME
    WHERE T.TRIP_ID = TRIP_ID_MOD;
    IF NEW_NUMBER_OF_PLACES >= NO_RESERVED THEN
        UPDATE TRIP
        SET MAX_NO_PLACES = NEW_NUMBER_OF_PLACES
        WHERE TRIP_ID = TRIP_ID_MOD;
    END IF;
END;

--ZADANIE 7
CREATE OR REPLACE TRIGGER TGADDINGRESERVATION
    AFTER INSERT
    ON RESERVATION
    FOR EACH ROW
DECLARE
    RES_ID INT;
    STAT   CHAR;
BEGIN
    RES_ID := :NEW.RESERVATION_ID;
    STAT := :NEW.STATUS;
    INSERT INTO LOG VALUES (DEFAULT, RES_ID, TRUNC(SYSDATE), STAT);
END;

CREATE OR REPLACE TRIGGER TGMODIFYRESERVATION
    AFTER UPDATE OF STATUS
    ON RESERVATION
    FOR EACH ROW
DECLARE
    V_RESERVATION_ID RESERVATION.RESERVATION_ID%TYPE;
BEGIN
    V_RESERVATION_ID := :NEW.RESERVATION_ID;
    IF :OLD.STATUS != :NEW.STATUS THEN
        INSERT INTO LOG (RESERVATION_ID, LOG_DATE, STATUS)
        VALUES (V_RESERVATION_ID, TRUNC(SYSDATE), :NEW.STATUS);
    END IF;
END;


DROP TRIGGER TGMODIFYRESERVATION;

CREATE OR REPLACE TRIGGER TGDELETESTOP
    BEFORE DELETE
    ON RESERVATION
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'RESERVATIONS CANT BE DELETED');
END;

DELETE
FROM RESERVATION
WHERE RESERVATION_ID = 1;


CREATE OR REPLACE PROCEDURE ADDRESERVATION_2(
    TRIP_ID_ADD IN INT, PERSON_ID_ADD IN INT
) AS
    NEW_TRIP_DATE      DATE;
    NO_AVAILABLE       INT;
    NEW_RESERVATION_ID INT;
BEGIN
    SELECT TRIP_DATE
    INTO NEW_TRIP_DATE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    SELECT NO_AVAILABLE_PLACES
    INTO NO_AVAILABLE
    FROM TRIPSVIEW VT
             INNER JOIN TRIP T2 ON VT.TRIP_NAME = T2.TRIP_NAME
    WHERE T2.TRIP_ID = TRIP_ID_ADD;

    IF NEW_TRIP_DATE > TRUNC(SYSDATE) AND NO_AVAILABLE > 0 THEN
        INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS) VALUES (TRIP_ID_ADD, PERSON_ID_ADD, 'N');
        SELECT MAX(RESERVATION_ID)
        INTO NEW_RESERVATION_ID
        FROM RESERVATION;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'OUT OF DATE');
    END IF;
END;


CREATE OR REPLACE PROCEDURE MODIFYRESERVATIONSTATUS_2(
    RESERVATION_ID_MOD IN INT, STATUS_CHANGE IN CHAR
) AS
    NO_AVAILABLE   INT;
    TRIP_ID_AC     INT;
    CURRENT_STATUS CHAR;
BEGIN
    SELECT TRIP_ID
    INTO TRIP_ID_AC
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    SELECT NO_AVAILABLE_PLACES
    INTO NO_AVAILABLE
    FROM TRIPSVIEW VT
             INNER JOIN TRIP T2 ON VT.TRIP_NAME = T2.TRIP_NAME
    WHERE T2.TRIP_ID = TRIP_ID_AC;

    SELECT STATUS
    INTO CURRENT_STATUS
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;
    IF (CURRENT_STATUS = 'N' AND STATUS_CHANGE = 'P' AND NO_AVAILABLE > 0) OR
       ((CURRENT_STATUS = 'N' OR CURRENT_STATUS = 'P' OR CURRENT_STATUS = 'C') AND STATUS_CHANGE = 'C') OR
       ((CURRENT_STATUS = 'C') AND STATUS_CHANGE = 'P' AND NO_AVAILABLE > 0) THEN
        UPDATE RESERVATION
        SET STATUS = STATUS_CHANGE
        WHERE RESERVATION_ID = RESERVATION_ID_MOD;
    END IF;
END;


--ZADANIE 8
CREATE OR REPLACE TRIGGER TGCHECKAVAILABLEPLACES
    BEFORE INSERT
    ON RESERVATION
    FOR EACH ROW
DECLARE
    MAX_PLACES      TRIP.MAX_NO_PLACES%TYPE;
    RESERVED_PLACES INT;
BEGIN
    SELECT MAX_NO_PLACES INTO MAX_PLACES FROM TRIP WHERE TRIP_ID = :NEW.TRIP_ID;
    SELECT COUNT(*) INTO RESERVED_PLACES FROM RESERVATION WHERE TRIP_ID = :NEW.TRIP_ID AND STATUS = 'P';

    IF MAX_PLACES - RESERVED_PLACES < 1 THEN
        RAISE_APPLICATION_ERROR(-20001, 'THERE ARE NO AVAILABLE PLACES FOR THIS TRIP.');
    END IF;
END;


CREATE OR REPLACE TRIGGER TGCHECKCHANGESTATUS
    BEFORE UPDATE OF STATUS
    ON RESERVATION
    FOR EACH ROW
DECLARE
    TRIP_MAX_PLACES INT;
    NO_RESERVED     INT;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    SELECT MAX_NO_PLACES
    INTO TRIP_MAX_PLACES
    FROM TRIP
    WHERE TRIP_ID = :NEW.TRIP_ID;

    SELECT COUNT(*)
    INTO NO_RESERVED
    FROM RESERVATION
    WHERE TRIP_ID = :NEW.TRIP_ID
      AND STATUS = 'P';

    IF ((:OLD.STATUS = 'N' AND :NEW.STATUS = 'P' AND NO_RESERVED < TRIP_MAX_PLACES)
        OR (:OLD.STATUS IN ('N', 'P', 'C') AND :NEW.STATUS = 'C')
        OR (:OLD.STATUS = 'C' AND :NEW.STATUS = 'P' AND NO_RESERVED < TRIP_MAX_PLACES))
    THEN
        NULL;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'STATUS CHANGE NOT ALLOWED');
    END IF;

    COMMIT;
END;

CREATE OR REPLACE PROCEDURE ADDRESERVATION_3(
    TRIP_ID_ADD IN INT, PERSON_ID_ADD IN INT
) AS
    NEW_TRIP_DATE      DATE;
    NEW_RESERVATION_ID INT;
BEGIN
    SELECT TRIP_DATE
    INTO NEW_TRIP_DATE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    IF NEW_TRIP_DATE > TRUNC(SYSDATE) THEN
        INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS) VALUES (TRIP_ID_ADD, PERSON_ID_ADD, 'N');
        SELECT MAX(RESERVATION_ID)
        INTO NEW_RESERVATION_ID
        FROM RESERVATION;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'OUT OF DATE');
    END IF;
END;


CREATE OR REPLACE PROCEDURE MODIFYRESERVATIONSTATUS_3(
    RESERVATION_ID_MOD IN INT, STATUS_CHANGE IN CHAR
) AS
    TRIP_ID_AC     INT;
    CURRENT_STATUS CHAR;
BEGIN
    SELECT TRIP_ID
    INTO TRIP_ID_AC
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    SELECT STATUS
    INTO CURRENT_STATUS
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    UPDATE RESERVATION
    SET STATUS = STATUS_CHANGE
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;
END;


----------------------------------
--ZADANIE 9
ALTER TABLE TRIP
    ADD NO_AVAILABLE_PLACES INT;

CREATE OR REPLACE VIEW RESERVATIONSVIEW_4
AS
SELECT C.COUNTRY_NAME,
       T.TRIP_DATE,
       T.TRIP_NAME,
       P.FIRSTNAME,
       P.LASTNAME,
       R.RESERVATION_ID,
       R.STATUS
FROM TRIP T
         INNER JOIN RESERVATION R
                    ON R.TRIP_ID = T.TRIP_ID
         INNER JOIN PERSON P
                    ON P.PERSON_ID = R.PERSON_ID
         INNER JOIN COUNTRY C
                    ON C.COUNTRY_ID = T.COUNTRY_ID;



CREATE OR REPLACE VIEW TRIPSVIEW_4
AS
SELECT COUNTRY_NAME,
       TRIP_DATE,
       TRIP_NAME,
       MAX_NO_PLACES,
       NO_AVAILABLE_PLACES
FROM TRIP T
         INNER JOIN COUNTRY C
                    ON T.COUNTRY_ID = C.COUNTRY_ID;

CREATE OR REPLACE VIEW AVAILABLETRIPSVIEW_4
AS
SELECT COUNTRY_NAME,
       TRIP_DATE,
       TRIP_NAME,
       MAX_NO_PLACES,
       NO_AVAILABLE_PLACES
FROM TRIPSVIEW
WHERE TRIP_DATE > SYSDATE
  AND NO_AVAILABLE_PLACES > 0;

CREATE OR REPLACE PROCEDURE CALCULATEAVAILABLEPLACES(
    S_TRIP_ID INT
)
AS
    NO_RESERVED_PLACES INT;
BEGIN
    SELECT COUNT(*)
    INTO NO_RESERVED_PLACES
    FROM RESERVATIONSVIEW_4 RV
             INNER JOIN TRIP T ON T.TRIP_NAME = RV.TRIP_NAME
    WHERE T.TRIP_ID = S_TRIP_ID
      AND STATUS = 'P';

    UPDATE TRIP
    SET TRIP.NO_AVAILABLE_PLACES = TRIP.MAX_NO_PLACES - NO_RESERVED_PLACES
    WHERE TRIP_ID = S_TRIP_ID;
END;

CREATE OR REPLACE PROCEDURE ADDRESERVATION_4(
    TRIP_ID_ADD IN INT, PERSON_ID_ADD IN INT
) AS
    NEW_TRIP_DATE      DATE;
    NEW_RESERVATION_ID INT;
    NO_AVAILABLE       INT;
BEGIN
    SELECT TRIP_DATE
    INTO NEW_TRIP_DATE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    SELECT NO_AVAILABLE_PLACES
    INTO NO_AVAILABLE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    IF NEW_TRIP_DATE > TRUNC(SYSDATE) AND NO_AVAILABLE > 0 THEN
        INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS) VALUES (TRIP_ID_ADD, PERSON_ID_ADD, 'N');
        SELECT MAX(RESERVATION_ID)
        INTO NEW_RESERVATION_ID
        FROM RESERVATION;
        CALCULATEAVAILABLEPLACES(TRIP_ID_ADD);
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'OUT OF DATE');
    END IF;
END;


CREATE OR REPLACE PROCEDURE MODIFYRESERVATIONSTATUS_4(
    RESERVATION_ID_MOD IN INT, STATUS_CHANGE IN CHAR
) AS
    TRIP_ID_AC     INT;
    CURRENT_STATUS CHAR;
BEGIN
    SELECT TRIP_ID
    INTO TRIP_ID_AC
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    SELECT STATUS
    INTO CURRENT_STATUS
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    UPDATE RESERVATION
    SET STATUS = STATUS_CHANGE
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;
    CALCULATEAVAILABLEPLACES(TRIP_ID_AC);
END;

CREATE OR REPLACE PROCEDURE MODIFYNOPLACES_4
    (TRIP_ID_MOD IN INT, NEW_NUMBER_OF_PLACES IN INT) AS
    NO_RESERVED INT;
BEGIN
    SELECT T2.MAX_NO_PLACES - VT.NO_AVAILABLE_PLACES
    INTO NO_RESERVED
    FROM TRIPSVIEW_4 VT
             INNER JOIN TRIP T2 ON VT.TRIP_NAME = T2.TRIP_NAME
    WHERE T2.TRIP_ID = TRIP_ID_MOD;

    IF NEW_NUMBER_OF_PLACES >= NO_RESERVED THEN
        UPDATE TRIP
        SET MAX_NO_PLACES = NEW_NUMBER_OF_PLACES
        WHERE TRIP_ID = TRIP_ID_MOD;
        CALCULATEAVAILABLEPLACES(TRIP_ID_MOD);
    END IF;
END;


--ZADANIE 10
CREATE OR REPLACE TRIGGER TGADDINGRESERVATIONPLACES
    AFTER INSERT
    ON RESERVATION
    FOR EACH ROW
BEGIN
    UPDATE TRIP
    SET TRIP.NO_AVAILABLE_PLACES = TRIP.NO_AVAILABLE_PLACES - 1
    WHERE TRIP.TRIP_ID = :NEW.TRIP_ID;
    INSERT INTO LOG(RESERVATION_ID, LOG_DATE, STATUS)
    VALUES (:NEW.RESERVATION_ID, TRUNC(SYSDATE), :NEW.STATUS);
END;

CREATE OR REPLACE TRIGGER TGCHANGINGSTATUS
    BEFORE UPDATE OF STATUS
    ON RESERVATION
    FOR EACH ROW
DECLARE
    TRIP_PLACES INT;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    SELECT NO_AVAILABLE_PLACES
    INTO TRIP_PLACES
    FROM TRIP
    WHERE TRIP_ID = :NEW.TRIP_ID;

    IF ((:OLD.STATUS = 'N' AND :NEW.STATUS = 'P' AND TRIP_PLACES > 0)
        OR (:OLD.STATUS IN ('N', 'P', 'C') AND :NEW.STATUS = 'C')
        OR (:OLD.STATUS = 'C' AND :NEW.STATUS = 'P' AND TRIP_PLACES > 0))
    THEN
        IF :NEW.STATUS = 'P' THEN
            UPDATE TRIP
            SET TRIP.NO_AVAILABLE_PLACES = TRIP.NO_AVAILABLE_PLACES - 1
            WHERE TRIP.TRIP_ID = :NEW.TRIP_ID;
        ELSE
            NULL;
        END IF;
        IF :NEW.STATUS IN ('C', 'N') AND :OLD.STATUS = 'P' THEN
            UPDATE TRIP
            SET TRIP.NO_AVAILABLE_PLACES = TRIP.NO_AVAILABLE_PLACES + 1
            WHERE TRIP.TRIP_ID = :NEW.TRIP_ID;
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'STATUS CHANGE NOT ALLOWED');
    END IF;
    COMMIT;
END;

CREATE OR REPLACE TRIGGER TGUPDATEAVAILABLE
    BEFORE UPDATE OF MAX_NO_PLACES
    ON TRIP
    FOR EACH ROW
BEGIN
    :NEW.NO_AVAILABLE_PLACES := :OLD.NO_AVAILABLE_PLACES + :NEW.MAX_NO_PLACES - :OLD.MAX_NO_PLACES;
END;

CREATE OR REPLACE PROCEDURE ADDRESERVATION_5(
    TRIP_ID_ADD IN INT, PERSON_ID_ADD IN INT
) AS
    NEW_TRIP_DATE      DATE;
    NEW_RESERVATION_ID INT;
    NO_AVAILABLE       INT;
BEGIN
    SELECT TRIP_DATE
    INTO NEW_TRIP_DATE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    SELECT NO_AVAILABLE_PLACES
    INTO NO_AVAILABLE
    FROM TRIP T
    WHERE T.TRIP_ID = TRIP_ID_ADD;

    IF NEW_TRIP_DATE > TRUNC(SYSDATE) AND NO_AVAILABLE > 0 THEN
        INSERT INTO RESERVATION(TRIP_ID, PERSON_ID, STATUS) VALUES (TRIP_ID_ADD, PERSON_ID_ADD, 'N');
        SELECT MAX(RESERVATION_ID)
        INTO NEW_RESERVATION_ID
        FROM RESERVATION;
        CALCULATEAVAILABLEPLACES(TRIP_ID_ADD);
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'OUT OF DATE');
    END IF;
END;

CREATE OR REPLACE PROCEDURE MODIFYRESERVATIONSTATUS_5(
    RESERVATION_ID_MOD IN INT, STATUS_CHANGE IN CHAR
) AS
    TRIP_ID_AC     INT;
    CURRENT_STATUS CHAR;
BEGIN
    SELECT TRIP_ID
    INTO TRIP_ID_AC
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    SELECT STATUS
    INTO CURRENT_STATUS
    FROM RESERVATION
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;

    UPDATE RESERVATION
    SET STATUS = STATUS_CHANGE
    WHERE RESERVATION_ID = RESERVATION_ID_MOD;
END;


CREATE OR REPLACE PROCEDURE MODIFYNOPLACES_5
    (TRIP_ID_MOD IN INT, NEW_NUMBER_OF_PLACES IN INT) AS
    NO_RESERVED INT;
BEGIN
    SELECT T2.MAX_NO_PLACES - VT.NO_AVAILABLE_PLACES
    INTO NO_RESERVED
    FROM TRIPSVIEW_4 VT
             INNER JOIN TRIP T2 ON VT.TRIP_NAME = T2.TRIP_NAME
    WHERE T2.TRIP_ID = TRIP_ID_MOD;

    IF NEW_NUMBER_OF_PLACES >= NO_RESERVED THEN
        UPDATE TRIP
        SET MAX_NO_PLACES = NEW_NUMBER_OF_PLACES
        WHERE TRIP_ID = TRIP_ID_MOD;
    END IF;
END;
